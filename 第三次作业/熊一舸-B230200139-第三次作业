% B230200139 熊一舸
% 问题描述 一矩形平板，长度l=4，厚度h=1,材料为各项同性，杨氏模量为E=1,泊松比为V=0，平板右端集中受力F=50，平板左端为固定约束。求解该结构的节点位移、支反力以及单元应力。(将该矩形单元分成两个3节点三角形单元)
import numpy as np
import scipy.sparse as sp
import scipy.sparse.linalg as splinalg

def generate_mesh(length, height, num_elements_x, num_elements_y):
    # 生成节点坐标
    x_nodes = np.linspace(0, length, num=num_elements_x + 1)
    y_nodes = np.linspace(0, height, num=num_elements_y + 1)

    nodes = np.array([(x, y) for y in y_nodes for x in x_nodes])

    # 生成三角形单元
    elements = []
    for i in range(num_elements_y):
        for j in range(num_elements_x):
            node1 = i * (num_elements_x + 1) + j
            node2 = (i + 1) * (num_elements_x + 1) + j
            node3 = i * (num_elements_x + 1) + (j + 1)
            elements.append([node1, node2, node3])

            node1 = (i + 1) * (num_elements_x + 1) + j
            node2 = (i + 1) * (num_elements_x + 1) + (j + 1)
            node3 = i * (num_elements_x + 1) + (j + 1)
            elements.append([node1, node2, node3])

    return nodes, np.array(elements)

def assemble_stiffness_matrix(nodes, elements, material_properties):
    num_nodes = len(nodes)
    
    # 初始化刚度矩阵和载荷向量
    K = np.zeros((2 * num_nodes, 2 * num_nodes))
    F = np.zeros(2 * num_nodes)

    for element in elements:
        x = nodes[element][:, 0]
        y = nodes[element][:, 1]

        # 计算三角形单元的面积
        A = 0.5 * np.abs(x[0] * (y[1] - y[2]) + x[1] * (y[2] - y[0]) + x[2] * (y[0] - y[1]))

        # 计算弹性矩阵
        D = material_properties['E'] / (1 - material_properties['nu']**2) * np.array([
            [1, material_properties['nu'], 0],
            [material_properties['nu'], 1, 0],
            [0, 0, (1 - material_properties['nu']) / 2]
        ])

        B = np.array([
            [y[1] - y[2], 0, y[2] - y[0], 0, y[0] - y[1], 0],
            [0, x[2] - x[1], 0, x[0] - x[2], 0, x[1] - x[0]],
            [x[2] - x[1], y[1] - y[2], x[0] - x[2], y[2] - y[0], x[1] - x[0], y[0] - y[1]]
        ]) / (2 * A)

        Ke = np.dot(B.T, np.dot(D, B)) * A

        # 在整体刚度矩阵中组装单元刚度矩阵
        for i in range(3):
            for j in range(3):
                K[2 * element[i]:2 * element[i] + 2, 2 * element[j]:2 * element[j] + 2] += Ke[2 * i:2 * i + 2, 2 * j:2 * j + 2]

    return K, F

def apply_point_load(F, node, load):
    # 在节点上施加集中载荷
    F[2 * node + 1] -= load

def apply_boundary_conditions(K, F, fixed_nodes):
    # 将固定节点的位移设为零
    for node in fixed_nodes:
        K[2 * node, :] = 0
        K[:, 2 * node] = 0
        K[2 * node, 2 * node] = 1
        F[2 * node] = 0

    return K, F

def solve_system(K, F):
    # 解线性方程组
    displacements = splinalg.spsolve(K, F)
    return displacements

def main():
    length = 4.0  # 平板的长度
    height = 1.0  # 平板的厚度
    num_elements_x = 10  # 横向划分数
    num_elements_y = 5  # 纵向划分数
    material_properties = {'E': 1.0, 'nu': 0.0}  # 材料属性
    point_load_magnitude = 50.0  # 集中力大小

    # 生成平板的有限元网格
    nodes, elements = generate_mesh(length, height, num_elements_x, num_elements_y)

    # 初始化载荷向量和刚度矩阵
    F = np.zeros(2 * len(nodes))
    K, F = assemble_stiffness_matrix(nodes, elements, material_properties)

    # 边界条件
    fixed_nodes = [0]  # 固定支撑节点
    K, F = apply_boundary_conditions(K, F, fixed_nodes)

    # 施加集中载荷
    point_load_node = len(nodes) - 1  # 最后一个节点
    apply_point_load(F, point_load_node, point_load_magnitude)

    # 求解线性方程组
    displacements = solve_system(K, F)

    # 输出结果
    print("Displacements:")
    print(displacements)

if __name__ == "__main__":
    main()
