%% 本文件为常应变三角形单元数据输入文件（横梁）
global nnd nel nne nodof eldof n geom connec dee nf Nodal_loads
format short e
%%%%%%%%%%%%%%%%%%%%%%% 输入开始 %%%%%%%%%%%%%%%%%%%%%%
%% 节点&单元数
nnd = 21 ;               	% 节点数 				
nel = 24 ;                	% 单元数			
nne = 3 ;                	% 单元节点数			
nodof =2;                	% 节点自由度
eldof = nne*nodof;       	% 单元自由度
<<<<<<< HEAD
 
=======

>>>>>>> parent of 4a159c1 ( 甘霏_S230200217)
%% 节点坐标
% geom(nnd,2)存储节点的x,y坐标
geom = [ 0,    -10    ;   % Node 1 
         0,    0      ;   % Node 2
         0,    10     ;   % Node 3  
         10,    -10   ;   % Node 4 
         10,    0     ;   % Node 5  
         10,    10    ;   % Node 6  
         20,    -10   ;   % Node 7  
         20,    0     ;   % Node 8  
         20,    10    ;   % Node 9  
         30,     -10  ;   % Node 10  
         30,     0    ;   % Node 11  
         30,     10   ;   % Node 12  
         40,    -10   ;   % Node 13  
         40,    0     ;   % Node 14  
         40,    10    ;   % Node 15  
         50,    -10   ;   % Node 16  
         50,    0     ;   % Node 17  
         50,    10    ;   % Node 18  
         60,    -10   ;   % Node 19  
         60,    0     ;   % Node 20  
         60,    10    ];  % Node 21   
<<<<<<< HEAD
 
=======

>>>>>>> parent of 4a159c1 ( 甘霏_S230200217)
%% 节点关联关系
%connec(nel,2)存储节点关联关系。【节点关联关系矩阵】
connec = [ 1,   4,  2;  ...% Element 1
           4,   5,  2;  ...% Element 2
           2,   5,  3;  ...% Element 3
           5,   6,  3;  ...% Element 4
           4,   7,  5;  ...% Element 5
           7,   8,  5;  ...% Element 6
           5,   8,  6;  ...% Element 7
           8,   9,  6;  ...% Element 8
           7,   10, 8;  ...% Element 9
           10,  11, 8;  ...% Element 10
           8,   11, 9;  ...% Element 11
           11,  12, 9;  ...% Element 12
           10,  13, 11; ...% Element 13
           13,  14, 11; ...% Element 14
           11,  14, 12; ...% Element 15
           14,  15, 12; ...% Element 16
           13,  16, 14; ...% Element 17
           16,  17, 14; ...% Element 18
           14,  17, 15; ...% Element 19
           17,  18, 15; ...% Element 20
           16,  19, 17; ...% Element 21
           19,  20, 17; ...% Element 22
           17,  20, 18; ...% Element 23
           20,  21, 18];   % Element 24       
<<<<<<< HEAD
 
=======

>>>>>>> parent of 4a159c1 ( 甘霏_S230200217)
%% 单元材料和几何参数
E = 200000.;     % E（Mpa）
vu = 0.3;        % 泊松比
thick = 5.;      % 横梁厚度（mm）
<<<<<<< HEAD
 
%% 形成平面应力的弹性矩阵
dee = formdsig(E,vu);
 
=======

%% 形成平面应力的弹性矩阵
dee = formdsig(E,vu);

>>>>>>> parent of 4a159c1 ( 甘霏_S230200217)
%% 边界条件
%nf(nnd,nodof)储存边界条件。0代表自由度被约束，1（编号）代表没有。
%%1.假设每个节点每个自由度都未被约束。
nf = ones(nnd, nodof);    % 将矩阵 nf 初始化为 1
%%2.对实际有约束的自由度设置为0
nf(19,1) = 0; nf(19,2) = 0;  % 节点19、20、21为固端约束，自由度0
nf(20,1) = 0; nf(20,2) = 0;  
nf(21,1) = 0; nf(21,2) = 0;  
%%3.对未被约束的节点进行编号
n=0;
for i=1:nnd
    for j=1:nodof
        if nf(i,j) ~= 0 
            n=n+1;
           nf(i,j)=n;
        end
    end
end
<<<<<<< HEAD
 
=======

>>>>>>> parent of 4a159c1 ( 甘霏_S230200217)
%% 节点载荷
%load矩阵储存荷载
Nodal_loads= zeros(nnd, 2);
Nodal_loads(2,1) = 0.; Nodal_loads(2,2) = -1000.;    % Node 2
%%%%%%%%%%%%%%%%%%%%%%    输入结束    %%%%%%%%%%%%%%%%%%%%

%% 本程序使用3节点常应变三角形单元对二维问题进行线弹性静态分析
clear;clc
global nnd nel   eldof n geom connec dee nf Nodal_loads
format long g
<<<<<<< HEAD
 
=======

>>>>>>> parent of 4a159c1 ( 甘霏_S230200217)
%% 前处理
% 1参数的加载
fid =fopen('CST_COARSE_MESH_RESULTS.txt','w');%命名计算结果文件
CST_COARSE_MESH_DATA;%载入数据件
% 2整体力矢的组装
fg=zeros(n,1);
for i=1: nnd
    if nf(i,1) ~= 0
       fg(nf(i,1))= Nodal_loads(i,1);
    end
    if nf(i,2) ~= 0
       fg(nf(i,2))= Nodal_loads(i,2);
    end
end
% 3总刚的组装
kk = zeros(n, n);
for i=1:nel
    [bee,g,A] = elem_T3(i);  % 形成应变矩阵bee，操作矢量g，单元面积A
    ke=thick*A*bee'*dee*bee; % 计算单刚
    kk=form_KK(kk,ke, g);    % 组装总刚
end
<<<<<<< HEAD
 
=======

>>>>>>> parent of 4a159c1 ( 甘霏_S230200217)
%% 分析
%1 整体有限元方程的求解
delta = kk\fg ; % 求解未知位移
node_disp=zeros(nnd,2);
for i=1: nnd %
    if nf(i,1) == 0 
        x_disp =0.; 
    else
        x_disp = delta(nf(i,1)); 
    end
    if nf(i,2) == 0 
        y_disp = 0.; 
    else
        y_disp = delta(nf(i,2)); 
    end
    node_disp(i,:) =[x_disp y_disp];
end
%2 单元应力和应变
%1)检索位于中性轴上的节点的x_coord和y_disp
k = 0;
for i=1:nnd
    if geom(i,2)== 0.
        k=k+1;
        x_coord(k) = geom(i,1);
        vertical_disp(k)=node_disp(i,2);%vertical_disp垂直位移
    end
end
%2)计算应变应力
for i=1:nel
    [bee,g,A] = elem_T3(i); % 形成应变矩阵bee，操作矢量g，单元面积A
    eld=zeros(eldof,1);     % 将单元位移初始化为零
    for m=1:eldof
        if g(m)==0
            eld(m)=0;
        else
            eld(m)=delta(g(m)); % 检索单元位移
        end
    end
    eps=bee*eld;   % 计算应变（应变矩阵*位移）
    EPS(i,:)=eps ; % 存储所有结点的应变
    sigma=dee*eps; % 计算应力
    SIGMA(i,:)=sigma ; % 存储所有节点的应力
end
<<<<<<< HEAD
 
=======

>>>>>>> parent of 4a159c1 ( 甘霏_S230200217)
%% 后处理
print_CST_results;
% 绘制 x_direction 上的应力（梁的纵向应力云图）
x_stress = SIGMA(:,1);
cmin = min(x_stress);
cmax = max(x_stress);
caxis([cmin cmax])    %设置颜色范围
patch('Faces', connec, 'Vertices', geom, 'FaceVertexCData',x_stress, 'Facecolor','flat','Marker','o')
%patch('Faces',F,'Vertices',V，'FaceVertexCData',x_stress) 
% 创建一个或多个多边形，其中 V 指定顶点的值，F 定义要连接的顶点
% 'FaceVertexCData'这个东西是来指定顶点vertex上的颜色的。
% 'Facecolor','flat'设置属性
title('\sigma_{xx}(KN/mm^{2})','fontname','Times New Roman')
colorbar
function[bee,g,A] = elem_T3(i)
%% 该函数返回单元 i 的节点坐标、单元面积、应变矩阵、操作向量
global nne nodof geom connec nf 
%% 返回节点坐标
x1 = geom(connec(i,1),1);   y1 = geom(connec(i,1),2);
x2 = geom(connec(i,2),1);   y2 = geom(connec(i,2),2);
x3 = geom(connec(i,3),1);   y3 = geom(connec(i,3),2);
%% 单元面积的计算
A = (0.5)*det([1   x1    y1; 
               1   x2    y2; 
               1   x3    y3]);
<<<<<<< HEAD
 
=======

>>>>>>> parent of 4a159c1 ( 甘霏_S230200217)
 m11 = (x2*y3 - x3*y2)/(2*A);
 m21 = (x3*y1 - x1*y3)/(2*A);
 m31 = (x1*y2 - y1*x2)/(2*A);
 m12 = (y2 - y3)/(2*A);
 m22 = (y3 - y1)/(2*A);
 m32 = (y1 - y2)/(2*A);
 m13 = (x3 - x2)/(2*A);
 m23 = (x1 - x3)/(2*A);
 m33 = (x2 -x1)/(2*A);
<<<<<<< HEAD
 
=======

>>>>>>> parent of 4a159c1 ( 甘霏_S230200217)
%% 应变矩阵的计算
bee = [ m12   0    m22   0    m32      0; ...
         0   m13    0   m23    0     m33; ...
        m13  m12   m23  m22   m33    m32] ;
<<<<<<< HEAD
 
=======

>>>>>>> parent of 4a159c1 ( 甘霏_S230200217)
%% 操作向量
l=0;
for k=1:nne   
    for j=1:nodof
    l=l+1;
    g(l)=nf(connec(i,k),j);
    end
end
function[kk]=form_KK(kk,ke, g)
%% 此函数组装总刚
global  eldof 
for i=1:eldof
   if g(i) ~= 0
      for j=1: eldof
          if g(j) ~= 0
             kk(g(i),g(j))= kk(g(i),g(j)) + ke(i,j);
          end
       end
   end
end
 function[dee] = formdsig(E,vu)
global  vu E
% 此函数形成平面应力问题的弹性矩阵
c=E/(1.-vu*vu);
dee=c*[1          vu         0.        ;...
     vu         1           0.        ;...
     0.          0.       .5*(1.-vu)];
%% 本文件把分析结果输出到fid所代表的文件里。
fprintf(fid, '-------------------------------------------------------- \n');
fprintf(fid, ' \n ********** 分析结果 **********\n');
<<<<<<< HEAD
 
=======

>>>>>>> parent of 4a159c1 ( 甘霏_S230200217)
%% 打印节点位移
fprintf(fid, '------------------------------------------------------ \n');
fprintf(fid, 'Nodal displacements \n');
fprintf(fid, 'Node      disp_x          disp_y \n');
for i=1:nnd
    fprintf(fid,' %g,     %8.5e,     %8.5e\n',  ...
        i, node_disp(i,1), node_disp(i,2));
end
fprintf(fid,'\n');
<<<<<<< HEAD
 
=======

>>>>>>> parent of 4a159c1 ( 甘霏_S230200217)
%% 打印节点应力
fprintf(fid, '------------------------------------------------------ \n');
fprintf(fid, '                    Element stresses \n');
fprintf(fid, 'element    sigma_(xx)         sigma_(yy)         tau_(xy)\n');
for i=1:nel
    fprintf(fid,' %g,      %7.4e,       %7.4e,       %7.4e\n',i, ...
                SIGMA(i,1),SIGMA(i,2),SIGMA(i,3));
end
<<<<<<< HEAD
 
=======

>>>>>>> parent of 4a159c1 ( 甘霏_S230200217)
%% 打印节点应变
fprintf(fid, '------------------------------------------------------ \n');
fprintf(fid, '                     Element strains \n');
fprintf(fid, 'element    epsilon_(xx)       epsilon_(yy)         gamma_(xy)\n');
for i=1:nel
    fprintf(fid,' %g,      %7.4e,       %7.4e,       %7.4e\n',i, ...
                EPS(i,1),EPS(i,2),EPS(i,3));
end
